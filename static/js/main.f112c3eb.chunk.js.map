{"version":3,"sources":["redux/types/gameSetupTypes.ts","Components/EndGameButton/EndGameButton.styles.js","Components/EndGameButton/EndGameButton.tsx","redux/actions/gameSetupActions.ts","redux/types/scoreboardTypes.ts","redux/actions/scoreboardActions.ts","Components/Scoreboard/Scoreboard.styles.js","Components/Scoreboard/Scoreboard.tsx","Components/StartAGameModal/StartAGameModal.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","redux/reducers/scoreboardReducer.ts","redux/reducers/gameSetupReducer.ts","redux/store.ts","index.tsx"],"names":["gameSetupTypes","EndGameDiv","styled","div","EndGameButton","colorScheme","onClick","window","location","reload","scoreboardTypes","setPlayer1Name","text","type","PLAYER_1_NAME","payload","setPlayer2Name","PLAYER_2_NAME","setGameMode","value","SELECT_GAME_MODE","setCloseModal","event","CLOSE_MODAL","setPlayer1Total","score","PLAYER_1_TOTAL","setPlayer2Total","PLAYER_2_TOTAL","setPlayer1TotalList","PLAYER_1_TOTAL_LIST","setPlayer2TotalList","PLAYER_2_TOTAL_LIST","setTurn","player","TURN","setScoreInputPlaceholder","placeholder","SCORE_INPUT_PLACEHOLDER","setScoreInputValue","SCORE_INPUT_VALUE","ScoreboardStyles","ScoreStyles","PlayerScore","span","PlayerName","ScoreInput","NumberButton","chakra","Button","baseStyle","height","width","margin","NumberButtonsDiv","EnterScoreButtonDiv","ScoresTableDiv","Scoreboard","scoreTable","useSelector","state","gameSetupReducer","scoreboardReducer","player1Name","player2Name","player1Total","player2Total","player1TotalList","player2TotalList","turn","scoreInputPlaceholder","scoreInputValue","dispatch","useDispatch","bindActionCreators","scoreboardActions","playerScores","map","index","isNumeric","length","size","numberButtons","group","buttonGroup","numberButtonClick","removeButtonClick","substring","changeTurn","individualPlayerScoreValidation","playerTotal","playerName","alert","changeTurnValidation","parseInt","enterButtonClick","updateScore","e","target","setScore","key","useMediaQuery","isMobile","templateColumns","gap","onKeyDown","onChange","StartAGameModal","gameSetupActions","gameMode","closeModal","isOpen","onClose","isRequired","as","defaultValue","spacing","mr","HomePage","headingFontSize","fontSize","theme","extendTheme","colors","brand","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f112c3eb.chunk.js","sourcesContent":["export enum gameSetupTypes {\n  CLOSE_MODAL = 'CLOSE_MODAL',\n  SELECT_GAME_MODE = 'SELECT_GAME_MODE',\n  PLAYER_1_NAME = 'PLAYER_1_NAME',\n  PLAYER_2_NAME = 'PLAYER_2_NAME',\n}\n","import styled from 'styled-components';\n\nexport const EndGameDiv = styled.div`\n  margin-top: 2rem;\n`;\n","import { Button } from '@chakra-ui/react';\nimport { EndGameDiv } from './EndGameButton.styles';\n\nconst EndGameButton = () => {\n  function handleClick() {\n    window.location.reload();\n  }\n  return (\n    <EndGameDiv>\n      <Button colorScheme=\"blue\" onClick={handleClick}>\n        End Game!\n      </Button>\n    </EndGameDiv>\n  );\n};\n\nexport default EndGameButton;\n","import { gameSetupTypes } from '../types/gameSetupTypes';\n\ntype setPlayerNameActionType = {\n  type: string; // would need to be an enum not a string since it will be a constant\n  payload: string;\n};\n\ntype setGameModeActionType = {\n  type: string;\n  payload: string;\n};\n\ntype setCloseModalActionType = {\n  type: string;\n  payload: boolean;\n};\n\nexport const setPlayer1Name = (text: string): setPlayerNameActionType => ({\n  type: gameSetupTypes.PLAYER_1_NAME,\n  payload: text,\n});\n\nexport const setPlayer2Name = (text: string): setPlayerNameActionType => ({\n  type: gameSetupTypes.PLAYER_2_NAME,\n  payload: text,\n});\n\nexport const setGameMode = (value: string): setGameModeActionType => ({\n  type: gameSetupTypes.SELECT_GAME_MODE,\n  payload: value,\n});\n\nexport const setCloseModal = (event: boolean): setCloseModalActionType => ({\n  type: gameSetupTypes.CLOSE_MODAL,\n  payload: event,\n});\n","export enum scoreboardTypes {\n  PLAYER_1_TOTAL = 'PLAYER_1_TOTAL',\n  PLAYER_2_TOTAL = 'PLAYER_2_TOTAL',\n  PLAYER_1_TOTAL_LIST = 'PLAYER_1_TOTAL_LIST',\n  PLAYER_2_TOTAL_LIST = 'PLAYER_2_TOTAL_LIST',\n  TURN = 'TURN',\n  SCORE_INPUT_PLACEHOLDER = 'SCORE_INPUT_PLACEHOLDER',\n  SCORE_INPUT_VALUE = 'SCORE_INPUT_VALUE',\n}\n","import { scoreboardTypes } from '../types/scoreboardTypes';\n\ntype setPlayerTotalActionType = {\n  type: string;\n  payload: number;\n};\n\ntype setTurnActionType = {\n  type: string;\n  payload: string;\n};\n\nexport const setPlayer1Total = (score: number): setPlayerTotalActionType => ({\n  type: scoreboardTypes.PLAYER_1_TOTAL,\n  payload: score,\n});\n\nexport const setPlayer2Total = (score: number): setPlayerTotalActionType => ({\n  type: scoreboardTypes.PLAYER_2_TOTAL,\n  payload: score,\n});\n\nexport const setPlayer1TotalList = (\n  score: number\n): setPlayerTotalActionType => ({\n  type: scoreboardTypes.PLAYER_1_TOTAL_LIST,\n  payload: score,\n});\n\nexport const setPlayer2TotalList = (\n  score: number\n): setPlayerTotalActionType => ({\n  type: scoreboardTypes.PLAYER_2_TOTAL_LIST,\n  payload: score,\n});\n\nexport const setTurn = (player: string): setTurnActionType => ({\n  type: scoreboardTypes.TURN,\n  payload: player,\n});\n\nexport const setScoreInputPlaceholder = (\n  placeholder: string\n): setTurnActionType => ({\n  type: scoreboardTypes.SCORE_INPUT_PLACEHOLDER,\n  payload: placeholder,\n});\n\nexport const setScoreInputValue = (value: string): setTurnActionType => ({\n  type: scoreboardTypes.SCORE_INPUT_VALUE,\n  payload: value,\n});\n","import styled from 'styled-components';\nimport { Button, chakra } from '@chakra-ui/react';\n\nexport const ScoreboardStyles = styled.div`\n  padding: 20px;\n`;\n\nexport const ScoreStyles = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const PlayerScore = styled.span`\n  font-size: 3rem;\n  text-align: right;\n  margin-bottom: 2rem;\n`;\n\nexport const PlayerName = styled.span`\n  font-size: 3rem;\n  text-decoration: bold;\n`;\n\nexport const ScoreInput = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const NumberButton = chakra(Button, {\n  baseStyle: {\n    height: '4rem',\n    width: '4rem',\n    margin: '0.5rem',\n  },\n});\n\nexport const NumberButtonsDiv = styled.div`\n  text-align: center;\n  max-width: 19rem;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media (max-width: 600px) {\n    display: flex;\n    justify-content: space-around;\n  }\n`;\n\nexport const EnterScoreButtonDiv = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 1rem;\n`;\n\nexport const ScoresTableDiv = styled.div`\n  text-align: center;\n  max-width: 35rem;\n\n  @media (max-width: 600px) {\n    margin-top: 2rem;\n  }\n`;\n","/* eslint-disable default-case */\nimport React from 'react';\nimport {\n  Button,\n  Grid,\n  Input,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  useMediaQuery,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { scoreboardActions } from '../../redux';\nimport {\n  EnterScoreButtonDiv,\n  NumberButton,\n  NumberButtonsDiv,\n  PlayerName,\n  PlayerScore,\n  ScoreboardStyles,\n  ScoreInput,\n  ScoresTableDiv,\n  ScoreStyles,\n} from './Scoreboard.styles';\nimport { RootState } from '../../redux/store';\n\nconst Scoreboard: React.FC = () => {\n  const { gameSetupReducer, scoreboardReducer } = useSelector(\n    (state: RootState) => state\n  );\n\n  const { player1Name, player2Name } = gameSetupReducer;\n\n  const {\n    player1Total,\n    player2Total,\n    player1TotalList,\n    player2TotalList,\n    turn,\n    scoreInputPlaceholder,\n    scoreInputValue,\n  } = scoreboardReducer;\n\n  const dispatch = useDispatch();\n\n  const {\n    setPlayer1Total,\n    setPlayer2Total,\n    setPlayer1TotalList,\n    setPlayer2TotalList,\n    setTurn,\n    setScoreInputPlaceholder,\n    setScoreInputValue,\n  } = bindActionCreators(scoreboardActions, dispatch);\n\n  const playerScores = player1TotalList.map((score, index) => (\n    <Tr key={`scoreRow-${index}`}>\n      <Td>{index + 1}</Td>\n      <Td isNumeric>{score}</Td>\n      <Td isNumeric>{player2TotalList[index]}</Td>\n    </Tr>\n  ));\n\n  let scoreTable;\n  if (player1TotalList.length > 0) {\n    scoreTable = (\n      <Table size=\"sm\">\n        <Thead>\n          <Tr>\n            <Th>#</Th>\n            <Th isNumeric>{`${player1Name} score`}</Th>\n            <Th isNumeric>{`${player2Name} score`}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>{playerScores}</Tbody>\n      </Table>\n    );\n  }\n\n  const numberButtonClick = (value: number) => {\n    setScoreInputValue(`${scoreInputValue}${value}`);\n  };\n\n  const numberButtons = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0]].map(\n    (group, index) => {\n      const buttonGroup = group.map((value) => (\n        <NumberButton\n          type=\"button\"\n          key={`numberButton-${value}`}\n          onClick={() => numberButtonClick(value)}\n        >\n          {value}\n        </NumberButton>\n      ));\n\n      return (\n        <NumberButtonsDiv key={`numberGroup-${index}`}>\n          {buttonGroup}\n        </NumberButtonsDiv>\n      );\n    }\n  );\n\n  const removeButtonClick = () => {\n    setScoreInputValue(\n      scoreInputValue.substring(0, scoreInputValue.length - 1)\n    );\n  };\n\n  const changeTurn = (score: number) => {\n    switch (turn) {\n      case 'player1':\n        setPlayer1TotalList(score);\n        setTurn('player2');\n        setScoreInputPlaceholder(`${player2Name} score`);\n        setPlayer1Total(player1Total - score);\n        break;\n      case 'player2':\n        setPlayer2TotalList(score);\n        setTurn('player1');\n        setScoreInputPlaceholder(`${player1Name} score`);\n        setPlayer2Total(player2Total - score);\n        break;\n    }\n\n    setScoreInputValue('');\n  };\n\n  const individualPlayerScoreValidation = (\n    playerTotal: number,\n    playerName: string,\n    score: number\n  ) => {\n    if (playerTotal - score === 1 || playerTotal - score < 0) {\n      alert('No Score! You have bust!');\n      changeTurn(0);\n    } else if (playerTotal - score === 0) {\n      alert(\n        `Well done, ${playerName}! You have won! Click \"ok\" to restart game.`\n      );\n      window.location.reload();\n    } else if (!score) {\n      changeTurn(0);\n    } else {\n      changeTurn(score);\n    }\n  };\n\n  const changeTurnValidation = () => {\n    const score = parseInt(scoreInputValue);\n\n    if (score >= 181) {\n      alert('Please enter a valid score!');\n      setScoreInputValue('');\n    } else if (turn === 'player1') {\n      individualPlayerScoreValidation(player1Total, player1Name, score);\n    } else if (turn === 'player2') {\n      individualPlayerScoreValidation(player2Total, player2Name, score);\n    }\n  };\n\n  const enterButtonClick = () => {\n    changeTurnValidation();\n  };\n\n  const updateScore = (e: any) => {\n    setScoreInputValue(e.target.value);\n  };\n\n  const setScore = (e: any) => {\n    if (e.key === 'Enter') {\n      changeTurnValidation();\n    }\n  };\n\n  const [isMobile] = useMediaQuery('(min-width: 600px)');\n\n  return (\n    <ScoreboardStyles>\n      <ScoreStyles>\n        <PlayerName>{player1Name}</PlayerName>\n        <PlayerName>-</PlayerName>\n        <PlayerName>{player2Name}</PlayerName>\n      </ScoreStyles>\n      <ScoreStyles>\n        <PlayerScore>{player1Total}</PlayerScore>\n        <PlayerScore>-</PlayerScore>\n        <PlayerScore>{player2Total}</PlayerScore>\n      </ScoreStyles>\n      {isMobile ? (\n        <Grid templateColumns=\"repeat(2, 1fr)\" gap={10}>\n          <div>\n            <ScoreInput>\n              <span>\n                <Input\n                  type=\"text\"\n                  onKeyDown={setScore}\n                  value={scoreInputValue}\n                  onChange={updateScore}\n                  placeholder={scoreInputPlaceholder}\n                />\n              </span>\n              <span>\n                <Button\n                  colorScheme=\"red\"\n                  type=\"button\"\n                  onClick={removeButtonClick}\n                >\n                  &larr;\n                </Button>\n              </span>\n            </ScoreInput>\n            {numberButtons}\n            <EnterScoreButtonDiv>\n              <Button\n                colorScheme=\"teal\"\n                type=\"button\"\n                onClick={enterButtonClick}\n              >\n                Enter Score\n              </Button>\n            </EnterScoreButtonDiv>\n          </div>\n          <ScoresTableDiv>{scoreTable}</ScoresTableDiv>\n        </Grid>\n      ) : (\n        <div>\n          <div>\n            <ScoreInput>\n              <span>\n                <Input\n                  type=\"text\"\n                  onKeyDown={setScore}\n                  value={scoreInputValue}\n                  onChange={updateScore}\n                  placeholder={scoreInputPlaceholder}\n                />\n              </span>\n              <span>\n                <Button\n                  colorScheme=\"red\"\n                  type=\"button\"\n                  onClick={removeButtonClick}\n                >\n                  &larr;\n                </Button>\n              </span>\n            </ScoreInput>\n            {numberButtons}\n            <EnterScoreButtonDiv>\n              <Button\n                colorScheme=\"teal\"\n                type=\"button\"\n                onClick={enterButtonClick}\n              >\n                Enter Score\n              </Button>\n            </EnterScoreButtonDiv>\n          </div>\n          <ScoresTableDiv>{scoreTable}</ScoresTableDiv>\n        </div>\n      )}\n    </ScoreboardStyles>\n  );\n};\n\nexport default Scoreboard;\n","import {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  FormControl,\n  FormLabel,\n  Input,\n  RadioGroup,\n  HStack,\n  Radio,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { RootState } from '../../redux/store';\nimport { gameSetupActions, scoreboardActions } from '../../redux';\n\nconst StartAGameModal = () => {\n  const dispatch = useDispatch();\n\n  const { setPlayer1Name, setPlayer2Name, setGameMode, setCloseModal } =\n    bindActionCreators(gameSetupActions, dispatch);\n\n  const { setPlayer1Total, setPlayer2Total, setScoreInputPlaceholder } =\n    bindActionCreators(scoreboardActions, dispatch);\n\n  const startAGameState = useSelector((state: RootState) => state);\n\n  const { gameSetupReducer } = startAGameState;\n  const { player1Name, player2Name, gameMode, closeModal } = gameSetupReducer;\n\n  const startGame = () => {\n    if (player1Name && player2Name && gameMode) {\n      setCloseModal(true);\n    } else {\n      alert('You must enter in all the required options to start a game');\n    }\n  };\n\n  return (\n    <>\n      <Modal isOpen={!closeModal} onClose={() => setCloseModal(true)}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Set Up Game</ModalHeader>\n          <ModalBody>\n            <FormControl isRequired>\n              <FormLabel>Player 1</FormLabel>\n              <Input\n                onChange={(event) => {\n                  setPlayer1Name(event?.target.value);\n                  setScoreInputPlaceholder(`${event?.target.value} score`);\n                }}\n                placeholder=\"Player 1 name\"\n              />\n            </FormControl>\n            <FormControl isRequired>\n              <FormLabel>Player 2</FormLabel>\n              <Input\n                onChange={(event) => setPlayer2Name(event?.target.value)}\n                placeholder=\"Player 2 name\"\n              />\n            </FormControl>\n            <FormControl as=\"fieldset\" isRequired>\n              <FormLabel as=\"legend\">Game Mode</FormLabel>\n              <RadioGroup\n                defaultValue=\"301\"\n                onChange={(value) => {\n                  setGameMode(value);\n                  setPlayer1Total(parseInt(value));\n                  setPlayer2Total(parseInt(value));\n                }}\n              >\n                <HStack spacing=\"24px\">\n                  <Radio value=\"301\">301</Radio>\n                  <Radio value=\"501\">501</Radio>\n                </HStack>\n              </RadioGroup>\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={startGame}>\n              Start Game!\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default StartAGameModal;\n","import React from 'react';\nimport { Heading, useMediaQuery } from '@chakra-ui/react';\nimport EndGameButton from '../Components/EndGameButton/EndGameButton';\nimport Scoreboard from '../Components/Scoreboard/Scoreboard';\nimport StartAGameModal from '../Components/StartAGameModal/StartAGameModal';\n\nconst HomePage: React.FC = () => {\n  const [isMobile] = useMediaQuery('(min-width: 600px)');\n\n  const headingFontSize = isMobile ? '4xl' : '6xl';\n\n  return (\n    <>\n      <Heading fontSize={headingFontSize}>Let's Play Darts!</Heading>\n      <StartAGameModal />\n      <Scoreboard />\n      <EndGameButton />\n    </>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react';\nimport HomePage from './pages/HomePage';\n\nconst colors = {\n  brand: {\n    900: '#1a365d',\n    800: '#153e75',\n    700: '#2a69ac',\n  },\n};\nconst theme = extendTheme({ colors });\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <HomePage />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { scoreboardTypes } from '../types/scoreboardTypes';\n\ntype scoreboardStateInitialType = {\n  player1Total: number;\n  player2Total: number;\n  player1TotalList: number[];\n  player2TotalList: number[];\n  turn: string;\n  scoreInputPlaceholder: string;\n  scoreInputValue: string;\n};\n\nconst INITIAL_STATE: scoreboardStateInitialType = {\n  player1Total: 301,\n  player2Total: 301,\n  player1TotalList: [],\n  player2TotalList: [],\n  turn: 'player1',\n  scoreInputPlaceholder: 'Player 1 Score',\n  scoreInputValue: '',\n};\n\ninterface player1TotalActionType {\n  type: scoreboardTypes.PLAYER_1_TOTAL;\n  payload: number;\n}\n\ninterface player2TotalActionType {\n  type: scoreboardTypes.PLAYER_2_TOTAL;\n  payload: number;\n}\n\ninterface player1TotalListActionType {\n  type: scoreboardTypes.PLAYER_1_TOTAL_LIST;\n  payload: number;\n}\n\ninterface player2TotalListActionType {\n  type: scoreboardTypes.PLAYER_2_TOTAL_LIST;\n  payload: number;\n}\n\ninterface turnActionType {\n  type: scoreboardTypes.TURN;\n  payload: string;\n}\n\ninterface scoreInputPlaceholderActionType {\n  type: scoreboardTypes.SCORE_INPUT_PLACEHOLDER;\n  payload: string;\n}\n\ninterface scoreInputValueActionType {\n  type: scoreboardTypes.SCORE_INPUT_VALUE;\n  payload: string;\n}\n\ntype actionType =\n  | player1TotalActionType\n  | player2TotalActionType\n  | player1TotalListActionType\n  | player2TotalListActionType\n  | turnActionType\n  | scoreInputPlaceholderActionType\n  | scoreInputValueActionType;\n\nexport const scoreboardReducer = (\n  state = INITIAL_STATE,\n  action: actionType\n) => {\n  switch (action.type) {\n    case scoreboardTypes.PLAYER_1_TOTAL:\n      return {\n        ...state,\n        player1Total: action.payload,\n      };\n    case scoreboardTypes.PLAYER_2_TOTAL:\n      return {\n        ...state,\n        player2Total: action.payload,\n      };\n    case scoreboardTypes.PLAYER_1_TOTAL_LIST:\n      return {\n        ...state,\n        player1TotalList: [...state.player1TotalList, action.payload],\n      };\n    case scoreboardTypes.PLAYER_2_TOTAL_LIST:\n      return {\n        ...state,\n        player2TotalList: [...state.player2TotalList, action.payload],\n      };\n    case scoreboardTypes.TURN:\n      return {\n        ...state,\n        turn: action.payload,\n      };\n    case scoreboardTypes.SCORE_INPUT_PLACEHOLDER:\n      return {\n        ...state,\n        scoreInputPlaceholder: action.payload,\n      };\n    case scoreboardTypes.SCORE_INPUT_VALUE:\n      return {\n        ...state,\n        scoreInputValue: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { gameSetupTypes } from '../types/gameSetupTypes';\n\nexport type gameSetupStateInitialType = {\n  player1Name: string;\n  player2Name: string;\n  gameMode: string;\n  closeModal: boolean;\n};\n\nconst INITIAL_STATE: gameSetupStateInitialType = {\n  player1Name: '',\n  player2Name: '',\n  gameMode: '301',\n  closeModal: false,\n};\n\ninterface player1NameActionType {\n  type: gameSetupTypes.PLAYER_1_NAME;\n  payload: string;\n}\n\ninterface player2NameActionType {\n  type: gameSetupTypes.PLAYER_2_NAME;\n  payload: string;\n}\n\ninterface selectGameModeActionType {\n  type: gameSetupTypes.SELECT_GAME_MODE;\n  payload: string;\n}\n\ninterface closeModalActionType {\n  type: gameSetupTypes.CLOSE_MODAL;\n  payload: boolean;\n}\n\ntype actionType =\n  | player1NameActionType\n  | player2NameActionType\n  | selectGameModeActionType\n  | closeModalActionType;\n\nexport const gameSetupReducer = (state = INITIAL_STATE, action: actionType) => {\n  switch (action.type) {\n    case gameSetupTypes.PLAYER_1_NAME:\n      return {\n        ...state,\n        player1Name: action.payload,\n      };\n    case gameSetupTypes.PLAYER_2_NAME:\n      return {\n        ...state,\n        player2Name: action.payload,\n      };\n    case gameSetupTypes.SELECT_GAME_MODE:\n      return {\n        ...state,\n        gameMode: action.payload,\n      };\n    case gameSetupTypes.CLOSE_MODAL:\n      return {\n        ...state,\n        closeModal: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { scoreboardReducer } from './reducers/scoreboardReducer';\nimport { gameSetupReducer } from './reducers/gameSetupReducer';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ gameSetupReducer, scoreboardReducer });\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\n// eslint-disable-next-line no-undef\nexport type RootState = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}